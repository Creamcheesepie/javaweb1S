<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.javaweb1S.dao.AdminDAO">
	<select id="getPointList" resultType="com.spring.javaweb1S.vo.PointVO">
		select * from pointsetter;
	</select>
	
	<select id="getcategoryList" resultType="com.spring.javaweb1S.vo.CategoryVO">
		select * from board2_category where <![CDATA[category>2]]> and <![CDATA[category<102]]>;
	</select>
	
	<select id="getMaxcategory" resultType="int">
		select Max(category) from board2_category where <![CDATA[category>2]]> and <![CDATA[category<102]]>;
	</select>
	
	<select id="getReportCategoryList" resultType="com.spring.javaweb1S.vo.ReportCategoryVO">
		select rep_category, name, tableName, idxName,selectSector from report2_category;
	</select>
	
	<select id="getReportList" resultType="com.spring.javaweb1S.vo.ReportVO">
		select A.rep_idx,
					 B.name as category_name,
					 A.title,
					 A.wdate,
					 C.nickName,
					 A.takeSw,
					 A.tdate
		from report2 A,
				 report2_category B,
				 member2 C
		where A.m_idx=C.m_idx
			and A.rep_category = B.rep_category
			<if test="rep_category>0 and afterDate.equals('') and beforeDate.equals('')">
			and	A.rep_category = #{rep_category}
			</if>
			<if test="!afterDate.equals('') and !beforeDate.equals('')">
			and	A.wdate between #{afterDate} and #{beforeDate}
			</if>
			<if test="rep_category>0 and !afterDate.equals('') and !beforeDate.equals('')">
			and	A.rep_category = #{rep_category} and A.wdate between #{afterDate} and #{beforeDate}
			</if>
		order by rep_idx desc
		limit #{pageVO.sin},#{pageVO.pageSize}
	</select>
	
	<select id="getReportByRep_idx" resultType="com.spring.javaweb1S.vo.ReportVO">
		select A.* ,
		 			 B.nickName 
		from report2 A,
				 member2 B
		where A.m_idx = B.m_idx
			and A.rep_idx = #{rep_idx}
	</select>
	
	<select id="getReportCategoryByCategory" resultType="com.spring.javaweb1S.vo.ReportCategoryVO">
		select name,tableName,idxName,selectSector from Report2_category where rep_category = #{rep_category};
	</select>
	
	<select id="getExtraInformation" resultType="com.spring.javaweb1S.vo.ReportVO">
		<if test="rcVO.tableName.equals('board2')">
			select 
				A.title as reportedTitle, 
				A.content as reportedContent,
				B.nickName as reportednickName,
				B.m_idx as reported_m_idx
			from 
				board2 A,
				Member2 B  
			where 
					A.boa_idx = #{vo.reported_idx}
				and
					A.m_idx = B.m_idx
		</if>
		<if test="rcVO.tableName.equals('board2_reply')">
			select 
				A.content as reportedContent,
				B.nickName as reportednickName,
				B.m_idx as reported_m_idx
			from 
				board2_reply A,
				member2 B
			where 
					A.rep_idx = #{vo.reported_idx}
				and
					A.m_idx = B.m_idx
		</if>
		<if test="rcVO.tableNAme.equals('member2')">
			select nickName as reportednickName,m_idx as reported_m_idx from member2 where m_idx = #{vo.reported_idx}
		</if>
	</select>
	
	<select id="getAskCategoryList" resultType="com.spring.javaweb1S.vo.AskVO">
		select ask_category, name as category_name from ask2_category;
	</select>
	
	<select id="getAskList" resultType="com.spring.javaweb1S.vo.AskVO">
		select
			A.ask_idx,
			A.title,
			B.name as category_name,
			A.wdate,
			A.takeSw,
			C.nickName
		from
			Ask2 A,
			Ask2_category B,
			member2 C
		where
				A.m_idx=C.m_idx
			and
				A.ask_category = B.ask_category
			<if test="ask_category>0 and afterDate.equals('') and beforeDate.equals('')">
			and	A.ask_category = #{ask_category}
			</if>
			<if test="!afterDate.equals('') and !beforeDate.equals('')">
			and	A.wdate between #{afterDate} and #{beforeDate}
			</if>
			<if test="ask_category>0 and !afterDate.equals('') and !beforeDate.equals('')">
			and	A.ask_category = #{ask_category} and A.wdate between #{afterDate} and #{beforeDate}
			</if>
		order by ask_idx desc
		limit #{pageVO.sin},#{pageVO.pageSize}
	</select>
	
	<select id="getAskDetail" resultType="com.spring.javaweb1S.vo.AskVO">
		select
			A.*,
			B.name as category_name,
			C.nickName
		from
			ask2 A,
			ask2_category B,
			member2 C
		where
				A.ask_idx = #{ask_idx}
			and
				A.m_idx = C.m_idx
			and
				A.ask_category = B.ask_category
	</select>
	
	<select id="getRuleInfo" resultType="com.spring.javaweb1S.vo.RuleSetterVO">
		select 
			actionLimit,
			DATE_FORMAT(limitTime , '%H:%i') as limitTime,
			DATE_FORMAT(penaltyTime , '%H:%i') as penaltyTime
		from
			ruleSetter
		where
			rule_idx = #{rule_idx};
	</select>
	
	<select id="getBanList" resultType="com.spring.javaweb1S.vo.ReportVO">
		select A.ban_idx,
					 A.m_idx,
					 A.banType,
					 A.cdate,
					 A.wdate,
					 A.reason as content,
					 B.nickName
		from banlist A,
				 member2 B
		where A.m_idx = B.M_idx
			and	A.cdate between now()
											and date_add(now(), interval 1 year)
		order by A.cdate;
	</select>
	
	<select id="getBandetail" resultType="com.spring.javaweb1S.vo.ReportVO">
		select A.ban_idx,
					 A.m_idx,
					 A.banType,
					 A.cdate,
					 A.wdate,
					 A.reason as content,
					 B.nickName
		from banlist A,
				 member2 B
		where A.m_idx = B.M_idx
			and A.ban_idx = #{ban_idx};
	</select>

	<select id="getAdminBoardList" resultType="com.spring.javaweb1S.vo.BoardVO">
		select B.boa_idx,
					 B.m_idx,
					 M.nickName,
					 M.name,
					 M.mid,
					 B.title,
					 B.viewCnt,
					 B.recommendCnt,
					 B.wdate,
					 B.ddate,
					 B.category,
					 C.name as categoryName,
					 TIMESTAMPDIFF(day,B.ddate, now()) as deleteCnt 
		from board2 B, 
				 member2 M, 
				 board2_category C
		where M.m_idx=B.m_idx
			and B.category = C.category
			and <![CDATA[B.category>2]]> 
			and <![CDATA[B.category<100]]>
		group by B.boa_idx
		order by B.boa_idx desc
		limit #{vo.sin}, #{vo.pageSize};
	</select>	
	
	<select id="getNewMemberWeek" resultType="com.spring.javaweb1S.vo.StatVO">
		select date_format(signindate, '%Y-%v') as year_week,
			 count(*) as res1
		from member2
		where signindate between date_sub(now(), interval 2 month)
										 and now()
		group by 1;
	</select>
	
	<select id="getBoardStat" resultType="com.spring.javaweb1S.vo.StatVO">
		select A.category as res1,
					 count(A.boa_idx) as res2,
					 B.name as strRes
		from board2 A,
				 board2_category B
		where A.wdate between date_sub(now(), interval 1 month)
									 	and now()
			and <![CDATA[A.category>2]]> 
			and <![CDATA[A.category<100]]>
			and A.category = B.category
		group by 1;
	</select>
	
	<select id="getMemberList" resultType="com.spring.javaweb1S.vo.MemberVO">
		select A.m_idx,
					 A.nickName,
					 A.name,
					 A.level,
					 A.point,
					 A.totalCnt,
					 (select count(boa_idx) from board2 where m_idx = A.m_idx) as boaCnt,
					 (select count(rep_idx) from board2_reply where m_idx = A.m_idx) as repCnt,
					 (select count(off_idx) from offenderList where m_idx = A.m_idx) as offCnt
		from member2 A
		group by 1
		order by m_idx desc
		limit ${vo.sin}, ${vo.pageSize};
	</select>
	
	<select id="getReplyStat" resultType="com.spring.javaweb1S.vo.StatVO">
		select	B.title as strRes,
						count(a.rep_idx) as res1
		from board2_reply A,
				 board2 B,
				 board2_category C
		where	A.boa_idx = B.boa_idx
			and	B.category = C.category
		group by strRes
		order by res1 desc
		limit 10;
	</select>
	
	<select id="getRideAVG" resultType="com.spring.javaweb1S.vo.StatVO">
		select	avg(duration) as res1,
						avg(speed) as res2,
						avg(getHeight) as res3
		from member2
		where level <![CDATA[<]]> 5
	</select>
	
	<select id="getCategoryReplyStat" resultType="com.spring.javaweb1S.vo.StatVO">
		select	c.name as strRes,
						count(a.rep_idx) as res1
		from board2_reply A,
				 board2 B,
				 board2_category C
		where	A.boa_idx = B.boa_idx
			and	B.category = C.category
			and	A.wdate between date_sub(now(), interval 1 month)
									 		and now()
		group by strRes
		order by res1 desc
	</select>
	
	
	
	
	<insert id="setCategoryInput">
		insert board2_category values(#{maxCategory},#{categoryName},default,null,default);
	</insert>
	
	<insert id="setBanList">
		insert banList values(default, #{m_idx},#{banType},#{cdate},default,#{reason});
	</insert>
	
	
	
	
	
	<update id="setPointSetterUpdate">
	 update pointSetter set point = #{vo.point}, cdate = now(), c_reason = #{vo.c_reason} where part = #{vo.part};
	</update>
	
	<update id="setDelete">
		update ${tableName} set ddate=now() where ${idxName}=#{idx};
	</update>
	
	<update id="setMemberLevel">
		update member2 set level = #{level} where m_idx = #{m_idx};
	</update>
	
	<update id="setReportResultUpdate">
		update report2 set takeSw = #{takeSw}, takeContent = #{takeContent},tdate=now() where rep_idx=#{rep_idx}; 
	</update>
	
	<update id="setAskTake">
		update ask2 set takeContent = #{takeContent}, takeSw='2', tdate=now() where ask_idx = #{ask_idx};
	</update>
	
	<update id="setUpdateRuleSetterLimitOption">
		update ruleSetter set limitTime = #{strLimitTime}, actionLimit = #{actionLimit}, cdate=now() where rule_idx = #{rule_idx};
	</update>
	
	<update id="setUpdateRuleSetterPenaltyOption"> 
		update ruleSetter set penaltyTime = #{strPenaltyTime}, cdate = now() where rule_idx = #{rule_idx};
	</update>
	
	<update id="setBanOff">
		update banlist set cdate = now() where ban_idx = #{ban_idx};
	</update>
	
	<update id="setBanUpdate">
		update banlist set cdate = #{cdate}, banType=#{banType}, reason = #{reason} where ban_idx = #{ban_idx};
	</update>
	
	<update id="setBoardRestore">
		update board2 set ddate = null where boa_idx = #{boa_idx};
	</update>
	
	<update id="setBoardDelete">
		update board2 set ddate = now() where boa_idx = #{boa_idx};
	</update>
	
	<update id="setCategoryUpdate">
		update board2_category set name = #{name} where category = #{category}; 
	</update>
	
	
	
	
	<delete id="setDateBaseDelete">
		delete from board2 where boa_idx = #{boa_idx}; 
	</delete>

</mapper>